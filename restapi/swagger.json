{
    "swagger": "2.0",
    "info": {
        "version": "v1",
        "title": "TradingView Broker API",
        "description": "This documentation describes REST API that is a single solution to integrate Trading Platform to Broker website and Broker to TradingView.com.\n\nAdditional information that Broker should provide to TradingView to integrate a Broker to TradingView.com:\n  - SVG logo, logo preferred size\n  - Does Broker use TV symbology or support mapping\n  - Does Broker use TV data or support history / streaming requests\n  - List of instrument groups (optional)\n"
    },
    "host": "api.broker.com",
    "basePath": "/tradingview/v1",
    "schemes": [
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "securityDefinitions": {
        "oauth": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://api.broker.com/authorize/?client_id=CLIENT-ID",
            "description": "Look for more request details in /authorize request. TradingView will set Authorization header to 'Bearer ' + access_token for all requests with authorization."
        }
    },
    "parameters": {
        "account-id": {
            "name": "account-id",
            "in": "path",
            "description": "The account identifier",
            "type": "string",
            "required": true
        },
        "order-id": {
            "name": "order-id",
            "description": "Order ID",
            "in": "path",
            "type": "string",
            "required": true
        },
        "position-id": {
            "name": "position-id",
            "description": "Position ID",
            "in": "path",
            "type": "string",
            "required": true
        },
        "instrument-id": {
            "name": "instrument-id",
            "description": "Broker instrument name",
            "in": "path",
            "type": "string",
            "required": true
        },
        "symbol": {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name or ticker",
            "required": true,
            "type": "string"
        },
        "resolution": {
            "name": "resolution",
            "in": "query",
            "description": "Symbol resolution",
            "type": "string"
        },
        "from": {
            "name": "from",
            "in": "query",
            "description": "Unix timestamp (UTC) of leftmost required bar.",
            "required": true,
            "type": "number"
        },
        "to": {
            "name": "to",
            "in": "query",
            "description": "Unix timestamp (UTC) of rightmost required bar",
            "required": true,
            "type": "number"
        },
        "countback": {
            "name": "countback",
            "in": "query",
            "description": "Number of bars (higher priority than from). Trading Platform will never use it.",
            "type": "number"
        }
    },
    "responses": {
        "200": {
            "description": "OK",
            "schema": {
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/definitions/Status"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "trading",
            "description": "Implementation is required to use trading capabilities"
        },
        {
            "name": "data",
            "description": "Implementation is required to provide data for charts"
        },
        {
            "name": "site",
            "description": "Implementation is specific for TradingView.com integration. It is not required in Trading Platform."
        },
        {
            "name": "platform",
            "description": "Implementation is specific for Trading Platform integration. It is not required for TradingView.com integration."
        },
        {
            "name": "general",
            "description": "Implementation is required for any integration."
        }
    ],
    "paths": {
        "/authorize": {
            "get": {
                "tags": [
                    "general"
                ],
                "description": "Oauth2 Password authorization",
                "responses": {
                    "200": {
                        "description": "Access Token. TradingView will set Authorization header to 'Bearer ' + access_token for all requests with authorization.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "access_token": {
                                    "description": "Access token that acts as a session ID that the application uses for making requests. This token should be protected as though it were user credentials.",
                                    "type": "string"
                                },
                                "refresh_token": {
                                    "description": "(optional) An encrypted payload that can be used to refresh the access token when it expires.",
                                    "type": "string"
                                },
                                "expiration": {
                                    "description": "Time when the token is expired represented as the number of seconds since the Unix epoch (00:00:00 UTC on 1 January 1970)."
                                },
                                "errmsg": {
                                    "description": "Error message if the authorization has failed."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/accounts": {
            "get": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Get a list of accounts owned by the user",
                "responses": {
                    "200": {
                        "description": "Accounts list",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "accounts": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Account"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/accounts/{account-id}/state": {
            "get": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Get account information.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "balance": {
                                    "type": "number"
                                },
                                "unrealizedPl": {
                                    "type": "number"
                                },
                                "marginUsed": {
                                    "type": "number"
                                },
                                "marginAvail": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/accounts/{account-id}/orders": {
            "get": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Get pending orders for an account.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of pending orders. It is also expected that broker returns filled/cancelled/rejected during current sessions orders.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Order"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Create a new order",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    },
                    {
                        "name": "instrument",
                        "in": "formData",
                        "description": "Instrument to open the order on",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "qty",
                        "in": "formData",
                        "description": "The number of units to open order for",
                        "type": "number",
                        "required": true
                    },
                    {
                        "name": "side",
                        "in": "formData",
                        "description": "Side. Possible values - `buy` and `sell`.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "buy",
                            "sell"
                        ]
                    },
                    {
                        "name": "type",
                        "in": "formData",
                        "description": "Type. Possible values - `market`, `stop`, `limit`, `stoplimit`.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "market",
                            "stop",
                            "limit",
                            "stoplimit"
                        ]
                    },
                    {
                        "name": "limitPrice",
                        "in": "formData",
                        "description": "Limit Price for Limit or StopLimit order",
                        "type": "number"
                    },
                    {
                        "name": "stopPrice",
                        "in": "formData",
                        "description": "Limit Price for Limit or StopLimit order",
                        "type": "number"
                    },
                    {
                        "name": "durationType",
                        "in": "formData",
                        "description": "Expiration details (if supported)",
                        "type": "string"
                    },
                    {
                        "name": "durationDateTime",
                        "in": "formData",
                        "description": "Expiration datetime UNIX timestamp (if supported by duration type)",
                        "type": "number"
                    },
                    {
                        "name": "stopLoss",
                        "in": "formData",
                        "description": "StopLoss price (if supported)",
                        "type": "number"
                    },
                    {
                        "name": "takeProfit",
                        "in": "formData",
                        "description": "TakeProfit price (if supported)",
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/responses/200"
                    }
                }
            }
        },
        "/accounts/{account-id}/ordersHistory": {
            "get": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Get orders history for an account.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    },
                    {
                        "name": "maxCount",
                        "description": "Maximum amount of orders to return",
                        "in": "query",
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of orders",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Order"
                            }
                        }
                    }
                }
            }
        },
        "/accounts/{account-id}/orders/{order-id}": {
            "get": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Get an order for an account.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    },
                    {
                        "$ref": "#/parameters/order-id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order object",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Modify an existing order.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    },
                    {
                        "$ref": "#/parameters/order-id"
                    },
                    {
                        "name": "qty",
                        "in": "formData",
                        "description": "The number of units to open order for",
                        "type": "number"
                    },
                    {
                        "name": "limitPrice",
                        "in": "formData",
                        "description": "Limit Price for Limit or StopLimit order",
                        "type": "number"
                    },
                    {
                        "name": "stopPrice",
                        "in": "formData",
                        "description": "Limit Price for Limit or StopLimit order",
                        "type": "number"
                    },
                    {
                        "name": "stopLoss",
                        "in": "formData",
                        "description": "StopLoss price (if supported)",
                        "type": "number"
                    },
                    {
                        "name": "takeProfit",
                        "in": "formData",
                        "description": "TakeProfit price (if supported)",
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/responses/200"
                    }
                }
            },
            "delete": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Cancel an existing order.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    },
                    {
                        "$ref": "#/parameters/order-id"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/responses/200"
                    }
                }
            }
        },
        "/accounts/{account-id}/positions": {
            "get": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Get positions for an account.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of positions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Position"
                            }
                        }
                    }
                }
            }
        },
        "/accounts/{account-id}/positions/{position-id}": {
            "get": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Get a position for an account.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    },
                    {
                        "$ref": "#/parameters/position-id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Position object",
                        "schema": {
                            "$ref": "#/definitions/Position"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Modify an existing position.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    },
                    {
                        "$ref": "#/parameters/position-id"
                    },
                    {
                        "name": "stopLoss",
                        "in": "formData",
                        "description": "StopLoss price",
                        "type": "number"
                    },
                    {
                        "name": "takeProfit",
                        "in": "formData",
                        "description": "TakeProfit price",
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/responses/200"
                    }
                }
            },
            "delete": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Close an existing position.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    },
                    {
                        "$ref": "#/parameters/position-id"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/responses/200"
                    }
                }
            }
        },
        "/accounts/{account-id}/positions/{position-id}/state": {
            "get": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Get a position open profit/loss (unrealizedPl).",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    },
                    {
                        "$ref": "#/parameters/position-id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profit or loss value",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "openPl": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/accounts/{account-id}/executions": {
            "get": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Get a list of execution for an account and an instrument.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    },
                    {
                        "name": "instrument",
                        "description": "Broker instrument name",
                        "in": "formData",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "maxCount",
                        "description": "Maximum count of executions to return",
                        "in": "formData",
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of executions",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "executions": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Execution"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/accounts/{account-id}/instruments": {
            "get": {
                "tags": [
                    "trading",
                    "general"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Get a list of tradeable instruments that are available for trading with the account specified.",
                "parameters": [
                    {
                        "$ref": "#/parameters/account-id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of instruments.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "instruments": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Instrument"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/mapping/tvtobroker/{instrument-id}": {
            "get": {
                "tags": [
                    "trading",
                    "site"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Return broker instrument name by TradingView instrument name. Required to add Broker to TradingView.com. It is not required for Trading Platform integration.",
                "parameters": [
                    {
                        "$ref": "#/parameters/instrument-id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TradingView instrument name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Instrument not found"
                    }
                }
            }
        },
        "/mapping/brokertotv/{instrument-id}": {
            "get": {
                "tags": [
                    "trading",
                    "site"
                ],
                "security": [
                    {
                        "oauth": []
                    }
                ],
                "description": "Return TradingView instrument name by broker instrument name. Required to add Broker to TradingView.com. It is not required for Trading Platform integration.",
                "parameters": [
                    {
                        "$ref": "#/parameters/instrument-id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Broker instrument name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Instrument not found"
                    }
                }
            }
        },
        "/symbol_info": {
            "get": {
                "tags": [
                    "data",
                    "general"
                ],
                "description": "Get a list of all instruments of a specific group.",
                "parameters": [
                    {
                        "name": "group",
                        "in": "query",
                        "description": "Group name (example, NYSE)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of instruments.",
                        "schema": {
                            "$ref": "#/definitions/SymbolInfoArrays"
                        }
                    }
                }
            }
        },
        "/history": {
            "get": {
                "tags": [
                    "data",
                    "general"
                ],
                "description": "Bars request. You can find examples in the [documentation](https://github.com/tradingview/charting_library/wiki/UDF#bars).",
                "parameters": [
                    {
                        "$ref": "#/parameters/symbol"
                    },
                    {
                        "$ref": "#/parameters/resolution"
                    },
                    {
                        "$ref": "#/parameters/from"
                    },
                    {
                        "$ref": "#/parameters/to"
                    },
                    {
                        "$ref": "#/parameters/countback"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response is expected to be an object with properties listed below. Each property is treated as a table column.",
                        "schema": {
                            "$ref": "#/definitions/BarsArrays"
                        }
                    }
                }
            }
        },
        "/marks": {
            "get": {
                "tags": [
                    "data",
                    "platform"
                ],
                "description": "Request for bar marks (circles on top of bars). You can display custom marks only in the Trading Platform.",
                "parameters": [
                    {
                        "$ref": "#/parameters/symbol"
                    },
                    {
                        "$ref": "#/parameters/resolution"
                    },
                    {
                        "$ref": "#/parameters/from"
                    },
                    {
                        "$ref": "#/parameters/to"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response is expected to be an object with properties listed below. Each property is an array.",
                        "schema": {
                            "$ref": "#/definitions/MarksArrays"
                        }
                    }
                }
            }
        },
        "/timescale_marks": {
            "get": {
                "tags": [
                    "data",
                    "platform"
                ],
                "description": "Request for timescale marks (circles on the timescale). You can display custom marks only in the Trading Platform.",
                "parameters": [
                    {
                        "$ref": "#/parameters/symbol"
                    },
                    {
                        "$ref": "#/parameters/resolution"
                    },
                    {
                        "$ref": "#/parameters/from"
                    },
                    {
                        "$ref": "#/parameters/to"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response is expected to be an object with properties listed below. Each property is an array.",
                        "schema": {
                            "$ref": "#/definitions/TimescaleMarksArrays"
                        }
                    }
                }
            }
        },
        "/quotes": {
            "get": {
                "tags": [
                    "data",
                    "trading",
                    "general"
                ],
                "description": "Get current prices of the instrument",
                "parameters": [
                    {
                        "name": "symbols",
                        "in": "query",
                        "type": "string",
                        "description": "comma separated symbols",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current prices",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "s": {
                                    "description": "Status code for request",
                                    "type": "string",
                                    "enum": [
                                        "ok",
                                        "error"
                                    ]
                                },
                                "errmsg": {
                                    "description": "Error message",
                                    "type": "string"
                                },
                                "d": {
                                    "description": "Data",
                                    "type": "array",
                                    "items": [
                                        {
                                            "$ref": "#/definitions/QuotesResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/streaming": {
            "get": {
                "tags": [
                    "data",
                    "site"
                ],
                "description": "Stream of prices. Server constantly keeps the connection alive. If the connection is broken the server constantly tries to restore it. Transfer mode is 'chunked encoding'. The data feed should set 'Transfer-Encoding: chunked' and make sure that all intermediate proxies are set to use this mode. All messages are finished with '\r\n'. Streaming data should contain real-time only. It shouldn't contain snapshots of data.",
                "responses": {
                    "200": {
                        "description": "Data feed should provide ticks (trades, asks, bids). If there is no trades the data feed should set trades to bids. All times should be in UTC. Daily bars are needed if they cannot be built from ticks (has_dwm should be set to true in the symbol information).",
                        "schema": {
                            "type": "object",
                            "required": [
                                "id",
                                "t"
                            ],
                            "properties": {
                                "id": {
                                    "description": "Symbol",
                                    "type": "string"
                                },
                                "p": {
                                    "description": "Price",
                                    "type": "number"
                                },
                                "s": {
                                    "description": "Size",
                                    "type": "number"
                                },
                                "t": {
                                    "description": "Time",
                                    "type": "number"
                                },
                                "f": {
                                    "description": "Type (ask or bid, daily bar). Do not add 'f' for trades.",
                                    "type": "string",
                                    "enum": [
                                        "a",
                                        "b",
                                        "d"
                                    ]
                                },
                                "o": {
                                    "description": "Open",
                                    "type": "number"
                                },
                                "h": {
                                    "description": "High",
                                    "type": "number"
                                },
                                "l": {
                                    "description": "Low",
                                    "type": "number"
                                },
                                "c": {
                                    "description": "Close",
                                    "type": "number"
                                },
                                "v": {
                                    "description": "Volume",
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Status": {
            "type": "string",
            "enum": [
                "ok",
                "error"
            ]
        },
        "Account": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "currencySign": {
                    "type": "string"
                },
                "marginRate": {
                    "type": "number"
                },
                "config": {
                    "$ref": "#/definitions/AccountFlags"
                }
            }
        },
        "AccountFlags": {
            "type": "object",
            "properties": {
                "showQuantityInsteadOfAmount": {
                    "type": "boolean"
                },
                "supportBrackets": {
                    "type": "boolean"
                },
                "supportClosePosition": {
                    "type": "boolean"
                },
                "supportDOME": {
                    "type": "boolean"
                },
                "supportEditAmount": {
                    "type": "boolean"
                },
                "supportLevel2Data": {
                    "type": "boolean"
                },
                "supportMultiposition": {
                    "type": "boolean"
                },
                "supportPLUpdate": {
                    "type": "boolean"
                },
                "supportReducePosition": {
                    "type": "boolean"
                },
                "supportReversePosition": {
                    "type": "boolean"
                },
                "supportStopLimitOrders": {
                    "type": "boolean"
                }
            }
        },
        "Instrument": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Broker instrument name.",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "minQty": {
                    "type": "number"
                },
                "maxQty": {
                    "type": "number"
                },
                "qtyStep": {
                    "type": "number"
                },
                "pipSize": {
                    "type": "number"
                },
                "pipValue": {
                    "type": "number"
                },
                "minTick": {
                    "type": "number"
                }
            }
        },
        "Order": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "instrument": {
                    "description": "Instrument name that is used on a broker side.",
                    "type": "string"
                },
                "qty": {
                    "description": "Quantity",
                    "type": "number"
                },
                "side": {
                    "description": "Side. Possible values - \"buy\" and \"sell\".",
                    "type": "string",
                    "enum": [
                        "buy",
                        "sell"
                    ]
                },
                "type": {
                    "description": "Type. Possible values - \"market\", \"stop\", \"limit\", \"stoplimit\".",
                    "type": "string",
                    "enum": [
                        "market",
                        "stop",
                        "limit",
                        "stoplimit"
                    ]
                },
                "status": {
                    "description": "String constants to describe an order status.\n\n`Status`    | Description \n----------|-------------\npending \t| order is not created on a broker side yet \ninactive \t| bracket order is created but waiting for a base order to be filled \nworking\t| order is created but not executed yet \nrejected\t| order is rejected for some reason \nfilled\t| order is fully executed \ncanceled\t| order is canceled \n",
                    "type": "string",
                    "enum": [
                        "pending",
                        "inactive",
                        "working",
                        "rejected",
                        "filled",
                        "cancelled"
                    ]
                }
            }
        },
        "Position": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "instrument": {
                    "description": "Instrument name that is used on a broker side.",
                    "type": "string"
                },
                "qty": {
                    "description": "Quantity",
                    "type": "number"
                },
                "side": {
                    "description": "Side. Possible values - \"buy\" and \"sell\".",
                    "type": "string",
                    "enum": [
                        "buy",
                        "cell"
                    ]
                },
                "avgPrice": {
                    "description": "Average price of position trades",
                    "type": "number"
                }
            }
        },
        "Execution": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "instrument": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "time": {
                    "type": "number"
                },
                "qty": {
                    "description": "Quantity",
                    "type": "number"
                },
                "side": {
                    "description": "Side. Possible values - \"buy\" and \"sell\".",
                    "type": "string",
                    "enum": [
                        "buy",
                        "cell"
                    ]
                }
            }
        },
        "SymbolInfoArrays": {
            "type": "object",
            "description": "SymbolInfo is an object containing symbols metadata. Each value of this object is an array of values which size is equal to the length of symbols or a single value that is applied to all symbols.",
            "required": [
                "symbol",
                "description",
                "exchange-listed",
                "exchange-traded",
                "minmovement",
                "pricescale",
                "timezone",
                "session-regular"
            ],
            "properties": {
                "symbol": {
                    "description": "It's name of a symbol. It is a string which your users will see. Also, it will be used for data requests if you are not using tickers.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "description": "Description of a symbol. Will be printed in chart legend for this symbol.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exchange-listed": {
                    "description": "Short name of exchange where this symbol is listed.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exchange-traded": {
                    "description": "Short name of exchange where this symbol is traded.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "minmovement": {
                    "description": "Minimal integer price change",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "minmov2": {
                    "description": "It's a number for complex price formatting cases.",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "fractional": {
                    "description": "Boolean showing whether this symbol wants to have complex price formatting (see minmov2 below) or not",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "pricescale": {
                    "description": "MinimalPossiblePriceChange = minmovement / pricescale",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "has-intraday": {
                    "description": "Boolean showing whether symbol has intraday (minutes) history data. If it's false then all buttons for intradays resolutions will be disabled when this symbol is active in chart. If it is set to true, all resolutions that are supplied directly by the datafeed must be provided in intraday_multipliers array.",
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                },
                "has-no-volume": {
                    "description": "Boolean showing whether symbol has volume data or not.",
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                },
                "type": {
                    "description": "Symbol type (forex/stock etc.)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ticker": {
                    "description": "It's an unique identifier for this symbol in your symbology. If you specify this property then its value will be used for all data requests for this symbol. ticker is treated to be equal to symbol if not specified explicitly.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timezone": {
                    "description": "Exchange timezone for this symbol. We expect to get name of time zone in olsondb format.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "enum": [
                        "America/New_York",
                        "America/Los_Angeles",
                        "America/Chicago",
                        "America/Phoenix",
                        "America/Toronto",
                        "America/Vancouver",
                        "America/Argentina/Buenos_Aires",
                        "America/El_Salvador",
                        "America/Sao_Paulo",
                        "America/Bogota",
                        "Europe/Moscow",
                        "Europe/Athens",
                        "Europe/Berlin",
                        "Europe/London",
                        "Europe/Madrid",
                        "Europe/Paris",
                        "Europe/Warsaw",
                        "Australia/Sydney",
                        "Australia/Brisbane",
                        "Australia/Adelaide",
                        "Australia/ACT",
                        "Asia/Almaty",
                        "Asia/Ashkhabad",
                        "Asia/Tokyo",
                        "Asia/Taipei",
                        "Asia/Singapore",
                        "Asia/Shanghai",
                        "Asia/Seoul",
                        "Asia/Tehran",
                        "Asia/Dubai",
                        "Asia/Kolkata",
                        "Asia/Hong_Kong",
                        "Asia/Bangkok",
                        "Pacific/Auckland",
                        "Pacific/Chatham",
                        "Pacific/Fakaofo",
                        "Pacific/Honolulu",
                        "America/Mexico_City",
                        "Africa/Johannesburg",
                        "Asia/Kathmandu",
                        "US/Mountain"
                    ]
                },
                "session-regular": {
                    "description": "Trading hours for this symbol. See the [Trading Sessions](https://github.com/tradingview/charting_library/wiki/Trading-Sessions) article to know more details.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "supported-resolutions": {
                    "description": "An array of resolutions which should be enabled in resolutions picker for this symbol. Each item of an array is expected to be a string.",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "has-daily": {
                    "description": "The boolean value showing whether datafeed has its own D resolution bars or not. If has_daily = false then Charting Library will build respective resolutions from intraday by itself. If not, then it will request those bars from datafeed.",
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                },
                "intraday-multipliers": {
                    "description": "It is an array containing intraday resolutions (in minutes) the datafeed wants to build by itself. E.g., if the datafeed reported he supports resolutions [\"1\", \"5\", \"15\"], but in fact it has only 1 minute bars for symbol X, it should set intraday_multipliers of X = [1]. This will make Charting Library to build 5 and 15 resolutions by itself.",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "has-weekly-and-monthly": {
                    "description": "The boolean value showing whether datafeed has its own W and M resolution bars or not. If has_weekly_and_monthly = false then Charting Library will build respective resolutions from D by itself. If not, then it will request those bars from datafeed.",
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                }
            }
        },
        "BarsArrays": {
            "type": "object",
            "description": "Bars data.",
            "required": [
                "s"
            ],
            "properties": {
                "s": {
                    "description": "Status code.",
                    "type": "string",
                    "enum": [
                        "ok",
                        "error",
                        "no_data"
                    ]
                },
                "errmsg": {
                    "description": "Error message. Should be provided if s = \"error\"",
                    "type": "string"
                },
                "nb": {
                    "description": "unix time of the next bar if there is no data (status code is no_data) in the requested period (optional)",
                    "type": "number"
                },
                "t": {
                    "description": "bar time, unix timestamp (UTC). Daily bars should have only date part, time should be 0.",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "o": {
                    "description": "open price",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "h": {
                    "description": "high price",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "l": {
                    "description": "low price",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "c": {
                    "description": "close price",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "v": {
                    "description": "volume",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "MarksArrays": {
            "type": "object",
            "description": "Bar marks data.",
            "required": [
                "id",
                "time",
                "label"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifiers of marks.",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "time": {
                    "description": "bar time, unix timestamp (UTC).",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "color": {
                    "description": "Mark colors",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "enum": [
                        "red",
                        "green",
                        "blue",
                        "yellow"
                    ]
                },
                "text": {
                    "description": "mark popup text. HTML supported",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "label": {
                    "description": "a letter to be printed on a mark. Single character",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labelFontColor": {
                    "description": "color of a letter on a mark",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "enum": [
                        "red",
                        "green",
                        "blue",
                        "yellow"
                    ]
                },
                "minSize": {
                    "description": "minimal size of mark (diameter, pixels)",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "TimescaleMarksArrays": {
            "type": "object",
            "description": "Timescale marks data.",
            "required": [
                "id",
                "time",
                "label"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifiers of marks.",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "time": {
                    "description": "bar time, unix timestamp (UTC).",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "color": {
                    "description": "Mark colors",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "enum": [
                        "red",
                        "green",
                        "blue",
                        "yellow"
                    ]
                },
                "tooltip": {
                    "description": "tooltip text",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "label": {
                    "description": "a letter to be printed on a mark. Single character",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "QuotesResponse": {
            "type": "object",
            "description": "Price response for an instrument",
            "required": [
                "s",
                "n",
                "v"
            ],
            "properties": {
                "s": {
                    "description": "Status code for request",
                    "type": "string",
                    "enum": [
                        "ok",
                        "error"
                    ]
                },
                "n": {
                    "description": "Symbol name. Should be equal to the requested one",
                    "type": "string"
                },
                "v": {
                    "$ref": "#/definitions/SingleQuote"
                }
            }
        },
        "SingleQuote": {
            "type": "object",
            "description": "Price data for an instrument",
            "properties": {
                "ch": {
                    "description": "Change (displayed in Watch and Detail)",
                    "type": "string"
                },
                "chp": {
                    "description": "Change percent (displayed in Watch and Detail)",
                    "type": "string"
                },
                "lp": {
                    "description": "Last price",
                    "type": "number"
                },
                "ask": {
                    "description": "Ask price",
                    "type": "number"
                },
                "bid": {
                    "description": "Bid price",
                    "type": "number"
                },
                "open_price": {
                    "description": "Open",
                    "type": "number"
                },
                "high_price": {
                    "description": "High price",
                    "type": "number"
                },
                "low_price": {
                    "description": "Low price",
                    "type": "number"
                },
                "prev_close_price": {
                    "description": "Previous close price",
                    "type": "number"
                },
                "volume": {
                    "description": "Volume",
                    "type": "number"
                }
            }
        }
    }
}